name: kube cert refresh
description: Action to refresh cert and push into kubectl
inputs:
  cert:
    description: cert name
    required: true
  jwt:
    description: jwt with access to the cert api
    required: true
  group:
    description: Owning team
    required: true
  context:
    description: kubectl context to use
    required: true
  namespace:
    description: csv list of kubernetes namespace's the secret should exist in.
    required: true
  secret-name:
    description: kubernetes secret name to use
    required: true
  secret-type:
    description: kubernetes secret type to create name to use
    required: true
  slack-webhook:
    description: slack webhook to send messages with
    required: true
runs:
  using: composite
  steps:
    - uses: gdcorp-actions/ssl-action@main
      id: certs
      with:
        command: import-secrets
        certificates: '[{"server":"${{ inputs.cert }}","allow_renewal":true}]'
        team: ${{ inputs.group }}
        renew: true
        sso_token: ${{ inputs.jwt }}
        renewal_days: 90
    - shell: bash
      env:
        AWS_REGION: us-west-2
      run: |
        CERT_NAME=$( echo ${{ inputs.cert }} | tr "*" "_")
        SECRET=$(aws secretsmanager get-secret-value --secret-id $CERT_NAME --query 'SecretString' --output text)
        echo ${SECRET} | jq -r .crt > tls.crt
        echo ${SECRET} | jq -r .chain >> tls.crt
        echo ${SECRET} | jq -r .key > tls.key

        for namespace in $(echo ${{ inputs.namespace }} | sed "s/,/ /g")
        do
          OLD_SECRET=$(kubectl --context=${{ inputs.context }} -n $namespace get secret ${{ inputs.secret-name }} -o json | jq -r '.data')
          if [[ "${{ inputs.secret-type }}" == "opaque" ]];
          then
            kubectl --context=${{ inputs.context }} -n $namespace create secret generic ${{ inputs.secret-name }} --from-file=tls.crt=./tls.crt --from-file=tls.key=./tls.key --dry-run=client -o yaml | kubectl --context=${{ inputs.context }} -n $namespace apply -f -
          else
            kubectl --context=${{ inputs.context }} -n $namespace create secret tls ${{ inputs.secret-name }} --cert=./tls.crt --key=./tls.key --dry-run=client -o yaml | kubectl --context=${{ inputs.context }} -n $namespace apply -f -
          fi
          NEW_SECRET=$(kubectl --context=${{ inputs.context }} -n $namespace get secret ${{ inputs.secret-name }} -o json | jq -r '.data')
          
          if [ "$OLD_SECRET" != "$NEW_SECRET" ]; then
              curl --silent -H 'Content-Type: application/json' --data "{\"channel\": \"#ise-oncall-notifications\", \"username\": \"Certificate Updates\", \"as_user\": \"true\", \"link_names\": \"true\", \"icon_emoji\": \":github:\", \"attachments\": [{\"pretext\":\"Certificate Update\", \"text\": \"${{ inputs.secret-name }} changed in $namespace, roll impacted pods\"}] }" ${{ inputs.slack-webhook }}
          fi
        done
        rm tls.crt
        rm tls.key
